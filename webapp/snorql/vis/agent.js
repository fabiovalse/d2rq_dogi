// Generated by CoffeeScript 1.10.0
(function() {
  window.draw_agent_diagram = function() {
    var color, height, key, margin, prefixes, query, svg, url, value, width, x, x_axis, y, y_axis;
    prefixes = "";
    for (key in D2R_namespacePrefixes) {
      value = D2R_namespacePrefixes[key];
      prefixes += "PREFIX " + key + ": <" + value + "> ";
    }
    query = "SELECT ?label ?rate (COUNT(?article) AS ?cont) {\n\n?article dcterms:creator <" + resource.uri + ">;\nbibo:issue ?issue.\n\n?issue dcterms:isPartOf ?journal.\n\n?journal rdfs:label ?label .\n\nOPTIONAL{?journal dogi:rating ?rate.}\n\n} GROUP BY ?label ?rate";
    query = encodeURIComponent(prefixes + " " + query);
    url = "/sparql?query=" + query + "&output=json";
    margin = 20;
    width = d3.select('#main').node().getBoundingClientRect().width - margin * 2;
    height = 300;
    svg = d3.select('#visualization').append('svg').attr({
      width: width + margin * 2,
      height: height + margin * 2
    }).append('g').attr({
      transform: "translate(" + margin + ", " + margin + ")"
    });
    color = d3.scale.ordinal().domain([false, true]).range(['#67a9cf', '#ef8a62']);
    x = d3.scale.ordinal().rangeRoundBands([0, width], 0.3);
    y = d3.scale.linear().range([height, 0]);
    x_axis = d3.svg.axis().scale(x).orient('bottom');
    y_axis = d3.svg.axis().scale(y).orient('left').ticks(10);
    return d3.json(url, function(error, data) {
      var bars, enter_bars, legend;
      data = data.results.bindings.sort(function(a, b) {
        return a.cont.value < b.cont.value;
      });
      x.domain(data.map(function(d) {
        if (d.label.value.length > 10) {
          return (d.label.value.slice(0, 10)) + "...";
        } else {
          return d.label.value;
        }
      }));
      y.domain([
        0, d3.max(data, function(d) {
          return parseInt(d.cont.value) + 1;
        })
      ]);
      color.domain(data.map(function(d) {
        return d.rate != null;
      }));
      svg.append('g').attr({
        "class": 'x axis',
        transform: "translate(0, " + height + ")"
      }).call(x_axis);
      svg.append('g').attr({
        "class": 'y axis',
        transform: 'translate(10,0)'
      }).call(y_axis).append('text').attr({
        transform: 'rotate(-90)',
        y: 6,
        dy: '.71em',
        'text-anchor': 'end'
      }).text('Articles amount');
      bars = svg.selectAll('.bar').data(data);
      enter_bars = bars.enter().append('rect').attr({
        "class": 'bar'
      });
      bars.attr({
        x: function(d) {
          return x(d.label.value.length > 10 ? (d.label.value.slice(0, 10)) + "..." : d.label.value);
        },
        y: function(d) {
          return y(d.cont.value);
        },
        width: x.rangeBand(),
        height: function(d) {
          return height - y(d.cont.value);
        },
        fill: function(d) {
          return color(d.rate != null);
        }
      }).append('title').text(function(d) {
        return d.label.value + "\n" + d.cont.value + " articles";
      });
      legend = svg.selectAll('.legend').data(['A-rated Journal Articles', 'Not A-rated Journal Articles']);
      legend.enter().append('g').attr({
        "class": 'legend',
        'font-family': 'sans-serif',
        'font-size': '13px',
        transform: function(d, i) {
          return "translate(0," + (i * 20) + ")";
        }
      });
      legend.append('rect').attr({
        x: width - 18,
        width: 18,
        height: 18
      }).style({
        fill: color
      });
      return legend.append('text').attr({
        x: width - 24,
        y: 9,
        dy: '.35em'
      }).style({
        'text-anchor': 'end'
      }).text(function(d) {
        return d;
      });
    });
  };

}).call(this);
